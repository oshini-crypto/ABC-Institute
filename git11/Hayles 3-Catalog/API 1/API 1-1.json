{
  "openapi": "3.1.0",
  "info": {
    "title": "Taxi Service API12",
    "version": "1.0.0",
    "description": "A RESTful CRUD API for managing taxi bookings, drivers, and passengers."
  },
  "components": {
    "securitySchemes": {
      "apiKey": {
        "type": "apiKey",
        "in": "header",
        "name": "Authorization"
      }
    }
  },
  "security": [
    {
      "apiKey": []
    }
  ],
  "paths": {
    "/bookings": {
      "get": {
        "summary": "Retrieve all taxi bookings",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "example": [
                  {
                    "id": 1,
                    "passenger": "Alice",
                    "driver": "Bob",
                    "pickup_location": "123 Main St",
                    "dropoff_location": "456 Elm St",
                    "status": "Completed"
                  },
                  {
                    "id": 2,
                    "passenger": "Carol",
                    "driver": "Dave",
                    "pickup_location": "789 Oak St",
                    "dropoff_location": "101 Pine St",
                    "status": "In Progress"
                  }
                ]
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new taxi booking",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "passenger": {
                    "type": "string"
                  },
                  "driver": {
                    "type": "string"
                  },
                  "pickup_location": {
                    "type": "string"
                  },
                  "dropoff_location": {
                    "type": "string"
                  }
                },
                "required": [
                  "passenger",
                  "driver",
                  "pickup_location",
                  "dropoff_location"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Taxi booking created successfully"
          },
          "400": {
            "description": "Invalid request payload"
          }
        }
      }
    },
    "/bookings/{id}": {
      "get": {
        "summary": "Retrieve a taxi booking by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the taxi booking",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "example": {
                  "id": 1,
                  "passenger": "Alice",
                  "driver": "Bob",
                  "pickup_location": "123 Main St",
                  "dropoff_location": "456 Elm St",
                  "status": "Completed"
                }
              }
            }
          },
          "404": {
            "description": "Taxi booking not found"
          }
        }
      },
      "put": {
        "summary": "Update a taxi booking by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the taxi booking",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "passenger": {
                    "type": "string"
                  },
                  "driver": {
                    "type": "string"
                  },
                  "pickup_location": {
                    "type": "string"
                  },
                  "dropoff_location": {
                    "type": "string"
                  }
                },
                "required": [
                  "passenger",
                  "driver",
                  "pickup_location",
                  "dropoff_location"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Taxi booking updated successfully"
          },
          "400": {
            "description": "Invalid request payload"
          },
          "404": {
            "description": "Taxi booking not found"
          }
        }
      },
      "delete": {
        "summary": "Delete a taxi booking by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the taxi booking",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Taxi booking deleted successfully"
          },
          "404": {
            "description": "Taxi booking not found"
          }
        }
      }
    },
    "/drivers": {
      "get": {
        "summary": "Retrieve all drivers",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "example": [
                  {
                    "id": 1,
                    "name": "Bob",
                    "available": true
                  },
                  {
                    "id": 2,
                    "name": "Dave",
                    "available": false
                  }
                ]
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new driver",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "available": {
                    "type": "boolean"
                  }
                },
                "required": [
                  "name",
                  "available"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Driver created successfully"
          },
          "400": {
            "description": "Invalid request payload"
          }
        }
      }
    },
    "/drivers/{id}": {
      "get": {
        "summary": "Retrieve a driver by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the driver",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "example": {
                  "id": 1,
                  "name": "Bob",
                  "available": true
                }
              }
            }
          },
          "404": {
            "description": "Driver not found"
          }
        }
      },
      "put": {
        "summary": "Update a driver by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the driver",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "available": {
                    "type": "boolean"
                  }
                },
                "required": [
                  "name",
                  "available"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Driver updated successfully"
          },
          "400": {
            "description": "Invalid request payload"
          },
          "404": {
            "description": "Driver not found"
          }
        }
      },
      "delete": {
        "summary": "Delete a driver by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the driver",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Driver deleted successfully"
          },
          "404": {
            "description": "Driver not found"
          }
        }
      }
    },
    "/passengers": {
      "get": {
        "summary": "Retrieve all passengers",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "example": [
                  {
                    "id": 1,
                    "name": "Alice"
                  },
                  {
                    "id": 2,
                    "name": "Carol"
                  }
                ]
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new passenger",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Passenger created successfully"
          },
          "400": {
            "description": "Invalid request payload"
          }
        }
      }
    },
    "/passengers/{id}": {
      "get": {
        "summary": "Retrieve a passenger by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the passenger",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "example": {
                  "id": 1,
                  "name": "Alice"
                }
              }
            }
          },
          "404": {
            "description": "Passenger not found"
          }
        }
      },
      "put": {
        "summary": "Update a passenger by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the passenger",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Passenger updated successfully"
          },
          "400": {
            "description": "Invalid request payload"
          },
          "404": {
            "description": "Passenger not found"
          }
        }
      },
      "delete": {
        "summary": "Delete a passenger by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the passenger",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Passenger deleted successfully"
          },
          "404": {
            "description": "Passenger not found"
          }
        }
      }
    }
  }
}
